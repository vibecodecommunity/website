---
import { getCollection } from 'astro:content'
import type { ContentItem } from '@/content/config'

import Base from '@/layouts/Base.astro'
import PostPreview from '@/components/PostPreview.astro'

export async function getStaticPaths() {
  // Get all content from each collection
  const newsItems = await getCollection('news')
  const toolsItems = await getCollection('tools')
  const learnItems = await getCollection('learn')
  
  // Combine all items with tags
  const allItems = [
    ...newsItems,
    ...toolsItems,
    ...learnItems
  ].filter(item => item.data.tags && item.data.tags.length > 0)
  
  // Extract unique tags and ensure they're trimmed
  const uniqueTags = [...new Set(
    allItems.flatMap(item => 
      (item.data.tags || []).map(tag => tag.trim())
    )
  )]

  // For debugging - you can check the console to see what tags are found
  console.log("Generated tags:", uniqueTags);

  return uniqueTags.map((tag) => {
    // Filter items that include this tag (with case-insensitive matching)
    const filteredItems = allItems.filter(item => 
      item.data.tags && item.data.tags.some(t => 
        t.trim().toLowerCase() === tag.toLowerCase()
      )
    )
    
    return {
      params: { tag },
      props: { items: filteredItems },
    }
  })
}

const { tag } = Astro.params
const { items } = Astro.props
---

<Base meta={{ title: 'Content tagged with ' + tag }}>
  <h2 class="mb-10 text-2xl font-heading tracking-wide w500:text-lg">
    Content tagged with <span class="text-text dark:text-darkText">#{tag}</span>
  </h2>
  <div class="w700:grid-cols-1 grid grid-cols-2 gap-5">
    {
      items.map((item) => {
        // Determine what kind of content this is
        const isNews = 'title' in item.data && 'pubDate' in item.data && 'category' in item.data 
        const isLearn = 'title' in item.data && 'level' in item.data
        const isTool = 'name' in item.data && 'category' in item.data
        
        if (isNews || isLearn) {
          // Use type assertion to tell TypeScript this has title property
          const typedItem = item as (typeof item & { data: { title: string, description: string, pubDate: Date } })
          return (
            <PostPreview
              url={'/' + item.collection + '/' + item.slug}
              title={typedItem.data.title}
              description={typedItem.data.description}
              pubDate={typedItem.data.pubDate}
            />
          )
        } else if (isTool) {
          // Use type assertion for tool items
          const typedItem = item as (typeof item & { data: { name: string, description: string } })
          // Tools might not have a date
          return (
            <PostPreview
              url={'/tools/' + item.slug}
              title={typedItem.data.name}
              description={typedItem.data.description}
              pubDate={new Date()}
            />
          )
        }
      })
    }
  </div>
</Base>
